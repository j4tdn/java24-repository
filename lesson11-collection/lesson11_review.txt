VD1: Iterable<T>
VD2: List<T>

+ T: generic type đặt bất kỳ kí tự nào, thường là viết hoa
+ Generic<T>: generic interface là interface có tham số truyền vào là generic type
  Kiểu Iterable có tham số truyền vào là generic type KDL -> T, T là đại diện cho KDL đối tượng
  Là có thể truyền vào KDl đối tượng nào đó cho T khi gọi Iterable
  
  => Iterable<Integer>
  => Iterable<String>
  
+ Giúp tạo ra các common/util methods có thể áp dụng cho bất kỳ KDL (đối tượng) nào
+ Lợi ích: hạn chế raw(object) types, bắt buộc phải khai báo KDL cụ thể thay vì dùng Object cho mọi phần tử
	--> hõ trợ bắt lỗi tại compile
	
Ôn tập
---------
iterable
^
Collection<T> (interface)	: 
^					
List<T>						:					--> ArrayList, LinkedList
Set<T>						:					--> HashSet, LinkedHashSet, TreeSet
Map<K,V>					: Set<Entry<K,V>>	--> HashMap, LinkedHashMap, TreeMap

vd: Set<E> ==> set.add(e)
			==> map.put(new Entry<>(e, PRESENT())

Từ khóa 'var' (từ java 10)
---------
- Hỗ trợ thay thế cho khai báo KDL phía bên trái (lúc compile) của biến
vd: Integer number = 5 
-> bên trái biến number là KDL Integer
-> bên phải biến là giá trị 5
Thông thường để biết biến có KDL gì:
+ Bên trái là KDL lúc compile
+ Bên phải là KDL lúc runtime

var: dùng để khai báo code ngắn gọn hơn
+ đối với generic type thì phải truyên tham số KDL vào List<>, Set<>, Map<>
---------

Lưu ý:
+ var không thể chứa trị null
+ var không thể là tham số truyền vào của hàm
+ var không thể chứa giá trị là 1 functional interface / 1 lamda


Câu hỏi: 
1. Phân biệt Array và ArrayList
2. Phân biệt ArrayList và LinkedList
