Car
	private attributes...
	
- Sử dụng private để đảm bảo hướng ptrien của OOP
+ Từng class sẽ quản lý riêng các thuộc tính của nó

- Nhưng trong coding 
+ Dự án có nhiều file code, các file gọi qua về các hàm thuộc tính lẫn nhau để 
xử lý (t.tính phải khác private)
  
--> Conflict với idea của OOP
--> Xử lý
+ Cho các thuộc tính là private
+ Khai báo thêm getter, setter cho các thuộc tính để truy cập/ thay đổi giá trị

Destructor(hàm hủy) đc sử dụng, gọi để xóa, clear những đối tượng mà ko còn đc sử dụng, ô nhớ 
HEAP ko còn đc liên kết bởi ô nhớ nào ở STACK cả

Từ khóa static
	+ Sử dụng ở thuộc tính(1 biến toàn cục, 1 t.tính của KDL class)
	
	Với thuộc tính non-static 
	--> thuộc tính đó sẽ thuộc pvi của đối tượng
	--> thuộc tính đó sẽ đc quản lý riêng trên từng đối tượng, ô nhớ
	
	Với t. tính static
	--> thuộc tính đó sẽ thuộc pvi của class
	--> tất cả các đối tượng đc tạo ra từ class này để sdung chung giá trị của biến static
	+ Có thể đc truy cập từ đối tượng
	--> ko khuyến khích, vì nhìn code set cho t.tính của 1 đối tượng nhưng lại
	ăn code cho tất cả đối tượng
	+ Có thể đc truy cập từ class

	+ Sử dụng ở hàm
	Khai báo hàm đó là static nếu hàm ko phụ thuộc vào đối tượng đang gọi
	--> Đối tượng nào gọi cũng cho KQ giống nhau

	Khai báo hàm đó là non-static nếu hàm đó phụ thuộc vào đối tượng đang gọi
	--> Mỗi đối tượng khi gọi vào có thể cho ra KQ khác nhau
	
	+ Sử dụng ở class
	--> builder pattern


	
Câu hỏi 1: Vì sao các thuộc tính phải khai báo private rồi dùng getter/setter truy cập
mà ko sử dụng public để ngắn gọn
+ Nếu để public thì truy cập đc từ bất kỳ class nào, hoàn toàn giống FOP ko có quản lý
riêng các t.tính cho từng đối tượng
+ Nếu để public thì ở class bên ngoài ó thể truy cập trực tiếp t.tính và thay đổi luôn
CTDL(KDL) của t.tính, sai bài toán
Vd: colors từ dynamic size sang fixed size
+ Từ nay về sau khi tạo ra 1 class
private attribute và getter setter để truy cập/ thay đổi giá trị

***
Class
	attribute
	constructor
	getter/setter
	toString