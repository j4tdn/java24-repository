Car
	private attributes ...
	
- Sử dụng private để đảm bảo hướng phát triển của OOP
	+ từng class sẽ quản lý riêng các thuộc tính của nó

	
- Nhưng trong coding
	+ Dự án có thể nhiều file code, các file gọi qua về các hàm thuộc tính lẫn nhau để xử lý (thuộc tính phải khác private)
	
--> Conflict với idea của OOP
--> Xử lý
	+ Cho các thuộc tính là private
	+ Khai báo thêm getter, setter cho các thuộc tính để truy cập/thay đổi giá trị
	
Destructor (hàm hủy) được sử dụng(gọi) để xóa, clear những đối tượng mà ko còn đc sử dụng,
ô nhớ ở HEAP kh còn được liên kết bởi ô nhớ nào ở STACK cả

Từ khóa static
	+ Sử dụng ở thuộc tính(1 biến TC, 1 TT của KDL class)
		
		Với thuộc tính non-static
		--> thuộc tính đó sẽ thuộc phạm vi của đối tượng
		--> thuộc tính đó sẽ được quản lý riêng trên từng đối tượng, ô nhớ
		
		Với thuộc tính static
		--> thuộc tính đó sẽ thuộc phạm vi của class
		--> tất cả các đối tượng đc tạo ra từ class này đều sử dụng chung giá trị của biến static
			+ có thể được truy cập từ đối tượng
				--> ko khuyến khích, vì nhìn code set cho tt của 1 đối tượng nhma lại ăn code cho tất cả đối tượng
			+ có thể được truy cập từ class
		
	+ Sử dụng ở hàm
		Khai báo hàm đó là static nếu hàm kh phụ thuộc vào đối tượng đang gọi
		--> đối tượng nào gọi cũng cho KQ giống nhau
		
		Khai báo hàm đó là non-static nếu hàm đó phụ thuộc vào đối tượng đang gọi
		--> mỗi đối tượng khi gọi vào có thể cho ra KQ khác nhau
	
	+ Sử dụng ở class
	
Câu hỏi 1: Vì sao các thuộc tính phải khai báo là private rồi dùng getter/setter truy cập mà không sử dụng public để code ngắn gọn

	+ Nếu để public thì truy cập đc từ bất kỳ class nào, hoàn toàn giống FOP ko có quản lý riêng các thuộc tính cho từng đối tượng
	+ Nếu để public thì ở class bên ngoài có thể truy cập trực tiếp thuộc tính và thay đổi luôn CTDL(KDL) của thuộc tính, sai bài toán
	VD: colors từ dynamic size sang fixed size
	+ Từ nay về sau khi tạo ra 1 class
		-> private attribute và getter setter để truy cập/thay đổi giá trị