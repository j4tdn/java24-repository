Car

  private attributes...

- Sử dụng private để đảm bảo hướng phát triển của OOP
	+ từng class sẽ quản lí riêng các thuộc tính của nó
	
- Nhưn trong coding
	+ Dự án có nhiều file code, các file gọi qua về các hàm thuộc tính lẫn nhau để xử lí(tt phải khác private)
	
--> Conflict với ide của OOP
--> Xử lí
	+ Cho các thuộc tính là private 
	+ KHai báo thêm getter, setter cho các thuộc tính để truy cập/thay đổi giá trị
	
- Destructor(hàm hủy) được sử dụng, gọi để xóa, clear những đối tượng mà không còn được sử dụng, ô nhớ ở HEAP không còn được liên kết
bởi ô nhớ nào ở STACK cả 

- Từ khóa static
	+ Sử dụng ở thuộc tính( 1 biến toàn cục, 1 thuộc tính của KDL class)
	
	Với thuộc tính non-static 
	--> thuộc tính đó sẽ thuộc phạm vi của đối tượng
	--> thuộc tính đó sẽ được quản lí riêng trên tường đối tượng, ô nhớ	
	
	Với thuộc tính static
	--> thuộc tính đó sẽ thuộc phạm vi của class
	--> tất cả các đối tượng được tạo ra tử class này để sử dụng chung giá trị của biến static
		+ có thể được truy cập từ đối tượng
		--> không khuyến khích, vì nhìn code set cho thuộc tính của 1 đối tượng
			nhưng mà lại ăn code cho tất cả đối tượng
		+ có thể được truy cập từ class
	
	+ Sử dụng ở hàm
	  Khai báo hàm hđó là static nếu hàm không phụ thuộc vào đối tượng đang gọi
	  --> đối tượng nào gọi cũng cho KQ giống nhau
	  
	  Khai báo hàm đó là non-static nếu hàm đó phụ thuộc vào đối tượng đang gọi
	  --> mỗi đối tượng khi gọi vào có thể cho ra KQ khác nhau
	+ Sử dụng ở class
	  -> builder pattern
	
Câu hỏi 1: Vì sao các thuộc tính phải khai báo là private rồi dùng getter/setter truy cập mà không sử dụng public để code ngắn gọn 
- Nếu để public thì truy cập được từ bất kì class nào, hoàn toàn giống với FOP, không có quản lí riêng thuộc tính cho từng đối tượng
- Nếu để public thì ở class bên ngoài có thể truy cập trực tiếp thuộc tính và thay đổi luôn cấu trúc dữ liệu (kiểu dữ liệu), sai bài
toán 
VD: colors từ dynamic size sang fixed size
- Từ này về sau khi tạo ra 1 class
	+ private attribute và getter setter để truy cập/thay đổi giá trị

Khi tạo 1 class thì tạo theo cấu trúc sau:
	+ attribute	
	+ constructor
	+ getter/setter
	+ to string